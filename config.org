#+AUTHOR: Nicolas Stirnemann (Batmi)
#+TITLE: Batmi GNU Emacs Config
#+DESCRIPTION: Batmi's personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#bootsraping-package-manager][BOOTSRAPING PACKAGE MANAGER]]
- [[#emacs][EMACS]]
  - [[#changing-inner-emacs-default][Changing inner emacs default]]
  - [[#change-built-in-packages][Change Built-In Packages]]
  - [[#savehist][Savehist]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#change-font][Change Font]]
  - [[#display-line-number-and-truncated-lines][Display line number and truncated lines]]
  - [[#scrolling][Scrolling]]
- [[#fix-path][FIX PATH]]
- [[#projects][PROJECTS]]
  - [[#projectile][Projectile]]
- [[#ui][UI]]
  - [[#dashboard][Dashboard]]
  - [[#modeline][Modeline]]
  - [[#nerd-icons][Nerd icons]]
  - [[#theme][Theme]]
- [[#orgmode][ORGMODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#indent][Indent]]
  - [[#disabling-electric-indent][Disabling electric indent]]
  - [[#source-code-block-tag-expansion][Source code block tag expansion]]
- [[#keybinding][KEYBINDING]]
  - [[#which-key][Which Key]]
  - [[#general-keybinding][General Keybinding]]
- [[#search][SEARCH]]
  - [[#deadgrep][Deadgrep]]
- [[#programming][PROGRAMMING]]
  - [[#eglot][Eglot]]
  - [[#completition][Completition]]
  - [[#jump-to-definition][Jump to definition]]
  - [[#treesiteer][Treesiteer]]
  - [[#lint][Lint]]
- [[#language-specefic][LANGUAGE SPECEFIC]]
  - [[#javascript][Javascript]]
  - [[#python][Python]]
  - [[#lua][Lua]]
  - [[#rust][Rust]]
  - [[#zig][Zig]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
- [[#git][GIT]]
  - [[#magit][Magit]]

* BOOTSRAPING PACKAGE MANAGER
#+begin_src emacs-lisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)

#+end_src

* EMACS

** Changing inner emacs default
#+begin_src emacs-lisp

  ;; INTERNAL PACKAGES
  (use-package emacs
    :init
    (setq completion-cycle-threshold 3)
    (setq tab-always-indent 'complete)
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    (setq enable-recursive-minibuffers t)

#+end_src

** Change Built-In Packages
#+begin_src emacs-lisp

  (use-package paren
    :init
    (setq show-paren-delay 0)
    :config
    (show-paren-mode +1))

#+end_src

** Savehist
#+begin_src emacs-lisp

  (savehist-mode t)

#+end_src

* GRAPHICAL USER INTERFACE TWEAKS

** Change Font
#+begin_src emacs-lisp

  (set-face-attribute 'default nil
    :font "JetBrainsMono Nerd Font"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Arial"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "JetBrainsMono Nerd Font"
    :height 110
    :weight 'medium)

  ;; Makes commented text and keywords italics
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; Default font on al graphical frames created after restarting Emacs
  (add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font"))

  (setq-default line-spacing 0.12)

#+end_src

** Display line number and truncated lines
#+begin_src emacs-lisp

    (global-display-line-numbers-mode 1)
    (global-visual-line-mode t)

#+end_src

** Scrolling
#+begin_src emacs-lisp
  (pixel-scroll-precision-mode 1)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-follow-mouse 't)
  (setq scroll-step 1)
#+end_src

* FIX PATH
#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :straight t
    :if (memq window-system '(mac ns x))
    :config
    (setq exec-path-from-shell-variables '("PATH" "GOPATH" "MANPATH"))
    (exec-path-from-shell-initialize))

#+end_src

* PROJECTS

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :config
    (projectile-mode 1))
#+end_src

* UI

** Dashboard
#+begin_src emacs-lisp

  (use-package dashboard
    :straight t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "There are things you can't see unless you change your standing.")
    (setq dashboard-startup-banner "/Users/batmi/.emacs.d/heart.jpeg")
    (setq dashboard-center-content nil)
    (setq dashboard-items '((recents . 5)
                            (agenda . 5)
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    :config
    (dashboard-setup-startup-hook))

#+end_src

** Modeline
#+begin_src emacs-lisp

  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1))

#+end_src

** Nerd icons
#+begin_src emacs-lisp

  (use-package nerd-icons
     :straight t
     :custom
     (nerd-icons-font-family "JetBrainsMono Nerd Font"))

  (use-package nerd-icons-dired
    :straight t
    :hook
    (dired-mode . nerd-icons-dired-mode))

#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package ef-themes
    :straight t
    :config
    (load-theme 'ef-cherie t))

#+end_src

* ORGMODE

** Enabling Table of Contents
#+begin_src emacs-lisp

  (use-package toc-org
    :straight t
    :after org
    :hook (org-mode . toc-org-enable))

#+end_src

** Indent
#+begin_src emacs-lisp

  (use-package org-indent :after org :straight nil :delight)

#+end_src

** Disabling electric indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
  (setq org-edit-src-content-indentation 2)
#+end_src

** Source code block tag expansion

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

* KEYBINDING

** Which Key
#+begin_src emacs-lisp

  (use-package which-key
    :straight t
    :config
    (add-hook 'after-init-hook 'which-key-mode))

#+end_src

** General Keybinding
#+begin_src emacs-lisp

  (global-set-key (kbd "M-i") #'previous-line)
  (global-set-key (kbd "M-j") #'backward-char)
  (global-set-key (kbd "M-k") #'next-line)
  (global-set-key (kbd "M-l") #'forward-char)

  (global-set-key (kbd "M-u") #'backward-word)
  (global-set-key (kbd "M-o") #'forward-word)
  (global-set-key (kbd "<f5>") #'deadgrep)

#+end_src

* SEARCH

** Deadgrep
#+begin_src emacs-lisp

  (use-package deadgrep
    :straight t)

#+end_src

* PROGRAMMING

** Eglot
#+begin_src emacs-lisp
  (use-package eglot 
    :custom
    (eldoc-echo-area-use-multiline-p)
    (eglot-autoshutdown t)
    (eglot-events-buffer-size 0)
    (read-process-output-max (* 1024 1024))
    :config
    (add-to-list 'eglot-server-programs '((python-mode python-ts-mode) . ("pyright-langserver" "--stdio")))
    :bind (
    ("C-c l b" . eglot-format-buffer)
	  ("C-c l a" . eglot-code-actions)
	  ("C-c l e" . eglot-reconnect)
	  ("C-c l r" . eglot-rename)))

  (add-hook 'python-base-mode-hook 'eglot-ensure)
  (add-hook 'zig-mode-hook 'eglot-ensure)
  (add-hook 'go-ts-mode-hook 'eglot-ensure)
  (add-hook 'c-ts-mode-hook 'eglot-ensure)
  (add-hook 'c++-ts-mode-hook 'eglot-ensure)
  (add-hook 'kotlin-mode-hook 'eglot-ensure)
  (add-hook 'rustic-mode-hook 'eglot-ensure)
  (add-hook 'css-ts-mode-hook 'eglot-ensure)
  (add-hook 'html-mode-hook 'eglot-ensure)
  (add-hook 'js-base-mode-hook 'eglot-ensure)
  (add-hook 'tsx-ts-mode-hook 'eglot-ensure)
  (add-hook 'latex-mode-hook 'eglot-ensure)
  (add-hook 'php-mode-hook 'eglot-ensure)

#+end_src

** Completition

*** Vertico . Orderless
 + Vertico, minimalist completition for minibuffer
 + Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

#+begin_src emacs-lisp

  ;; Enable vertico
  (use-package vertico
    :straight t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

#+end_src

*** Code-completion framework
#+begin_src emacs-lisp

  (use-package corfu
  :straight t
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-separator ?\s)
  (corfu-quit-at-boundary nil)
  (corfu-preview-current nil)
  (corfu-preselect 'prompt)
  (corfu-scroll-margin 5)
  :init
  (global-corfu-mode))

)

#+end_src

** Jump to definition
#+begin_src emacs-lisp
  (use-package dumb-jump
  :straight t)

  (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
#+end_src

** Treesiteer
#+begin_src emacs-lisp

  (use-package treesit-auto
    :straight t
    :custom (treesit-auto-install 'prompt)
    :config (global-treesit-auto-mode))

#+end_src

** Lint
#+begin_src emacs-lisp

;;  (use-package flycheck
;;    :straight t
;;    :init (global-flycheck-mode))

#+end_src

* LANGUAGE SPECEFIC

** Javascript
#+begin_src emacs-lisp
  (add-hook 'js-ts-mode-hook
	  (lambda()
	    (local-unset-key (kbd "M-."))))

  (setq js-indent-level 2)
#+end_src

** Python

*** Pyenv
#+begin_src emacs-lisp

  (use-package pyvenv
    :straight t
    :init
    (setenv "WORKON_HOME" "/Users/batmi/Library/Caches/pypoetry/virtualenvs/")
    (pyvenv-mode 1)
    (pyvenv-tracking-mode 1))

#+end_src

*** Blacken
#+begin_src emacs-lisp
  (use-package blacken
    :straight t
    :defer t
    :custom
    (blacken-allow-py36 t)
    (blacken-skip-string-normalization t)
    (blacken-only-if-project-is-blackened t)
    (black-fast-unsafe t)
    :hook (python-base-mode-hook . blacken-mode))
#+end_src

** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :straight t
    :defer t
    :bind (:map lua-mode-map
          ("C-c C-r" . lua-send-region)
          ("C-c C-e" . lua-send-current-line)))
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rustic
    :straight t
    :defer t
    :custom
    (rustic-lsp-client 'eglot))

  (use-package cargo
    :straight t
    :defer t
    :hook ((rust-ts-mode-hook rustic-mode-hook) . cargo-minor-mode))
#+end_src

** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
    :straight t
    :defer t)
#+end_src

* SHELLS AND TERMINALS

** Eshell
#+begin_src emacs-lisp

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximun-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "htop" "ssh" "top" "zsh"))

#+end_src

* GIT

** Magit
#+begin_src emacs-lisp

  (use-package magit
    :straight t
    :hook (after-save . magit-after-save-refresh-status))

#+end_src
