#+AUTHOR: Nicolas Stirnemann (Batmi)
#+TITLE: Batmi GNU Emacs Config
#+DESCRIPTION: Batmi's personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#emacs][EMACS]]
  - [[#changing-inner-emacs-default][Changing inner emacs default]]
  - [[#change-built-in-packages][Change Built-In Packages]]
  - [[#savehist][Savehist]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#change-font][Change Font]]
  - [[#display-line-number-and-truncated-lines][Display line number and truncated lines]]
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#adding-the-scripts-directory-to-path][Adding the scripts directory to path]]
  - [[#sourcing-the-scripts][Sourcing the Scripts]]
- [[#fix-path][FIX PATH]]
- [[#projects][PROJECTS]]
  - [[#projectile][Projectile]]
- [[#ui][UI]]
  - [[#dashboard][Dashboard]]
  - [[#modeline][Modeline]]
  - [[#all-the-icons][All the icons]]
  - [[#theme][Theme]]
- [[#orgmode][ORGMODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#disabling-electric-indent][Disabling electric indent]]
  - [[#source-code-block-tag-expansion][Source code block tag expansion]]
- [[#keybinding][KEYBINDING]]
  - [[#general-keybinding][General Keybinding]]
- [[#programming][PROGRAMMING]]
  - [[#eglot][Eglot]]
  - [[#completition][Completition]]
  - [[#treesiteer][Treesiteer]]
  - [[#lint][Lint]]
- [[#language-specefic][LANGUAGE SPECEFIC]]
  - [[#python][Python]]
  - [[#lua][Lua]]
  - [[#rust][Rust]]
  - [[#zig][Zig]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
- [[#git][GIT]]
  - [[#magit][Magit]]

* EMACS

** Changing inner emacs default
#+begin_src emacs-lisp

  ;; INTERNAL PACKAGES
  (use-package emacs
    :init
    (setq completion-cycle-threshold 3)
    (setq tab-always-indent 'complete)
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    (setq enable-recursive-minibuffers t)

#+end_src

** Change Built-In Packages
#+begin_src emacs-lisp

  (use-package paren
    :ensure nil
    :init
    (setq show-paren-delay 0)
    :config
    (show-paren-mode +1))

#+end_src

** Savehist
#+begin_src emacs-lisp

  (savehist-mode t)

#+end_src

* GRAPHICAL USER INTERFACE TWEAKS

** Change Font
#+begin_src emacs-lisp

  (set-face-attribute 'default nil
    :font "JetBrainsMono Nerd Font"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Arial"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "JetBrainsMono Nerd Font"
    :height 110
    :weight 'medium)

  ;; Makes commented text and keywords italics
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; Default font on al graphical frames created after restarting Emacs
  (add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font"))

  (setq-default line-spacing 0.12)

#+end_src

** Display line number and truncated lines
#+begin_src emacs-lisp

    (global-display-line-numbers-mode 1)
    (global-visual-line-mode t)

#+end_src

* IMPORTANT PROGRAMS TO LOAD FIRST

** Adding the scripts directory to path
#+begin_src emacs-lisp

  (add-to-list 'load-path "~/.emacs.d/scripts/")

#+end_src

** Sourcing the Scripts
#+begin_src emacs-lisp

  (require 'elpaca)

#+end_src

* FIX PATH
#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns x))
    :config
    (setq exec-path-from-shell-variables '("PATH" "GOPATH"))
    (exec-path-from-shell-initialize))

#+end_src

* PROJECTS

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode 1))
#+end_src

* UI

** Dashboard
#+begin_src emacs-lisp

  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "There are things you can't see unless you change your standing.")
    (setq dashboard-startup-banner "/Users/batmi/.emacs.d/heart.jpeg")
    (setq dashboard-center-content nil)
    (setq dashboard-items '((recents . 5)
                            (agenda . 5)
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    :config
    (dashboard-setup-startup-hook))

#+end_src

** Modeline
#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))

#+end_src

** All the icons
#+begin_src emacs-lisp

  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))

#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package ef-themes
    :ensure t
    :config
    (load-theme 'ef-cherie t))

#+end_src

* ORGMODE

** Enabling Table of Contents
#+begin_src emacs-lisp

  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

#+end_src

** Disabling electric indent
#+begin_src emacs-lisp
  (electric-indent-mode -1)
  (setq org-edit-src-content-indentation 2)
#+end_src

** Source code block tag expansion

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

* KEYBINDING

** General Keybinding
#+begin_src emacs-lisp

  (global-set-key (kbd "M-i") #'previous-line)
  (global-set-key (kbd "M-j") #'backward-char)
  (global-set-key (kbd "M-k") #'next-line)
  (global-set-key (kbd "M-l") #'forward-char)

  (global-set-key (kbd "M-u") #'backward-word)
  (global-set-key (kbd "M-o") #'forward-word)

#+end_src

* PROGRAMMING

** Eglot
#+begin_src emacs-lisp

  (use-package eglot
    :ensure nil
    :hook (
     (zig-mode-hook . eglot-ensure)
     (python-ts-mode-hook . eglot-ensure)
     (c-ts-mode-hook . eglot-ensure)
     (c++-ts-mode-hook . eglot-ensure)
     (rustic-mode-hook . eglot-ensure)
     (css-ts-mode-hook . eglot-ensure)
     (html-mode-hook . eglot-ensure)
     (js-ts-mode-hook . eglot-ensure)
     (js-jsx-mode-hook . eglot-ensure)
     (typescript-ts-mode . eglot-ensure)
     (tsx-ts-mode-hook . eglot-ensure))
    :bind (("C-c l b" . eglot-format-buffer)
     ("C-c l a" . eglot-code-actions)
     ("C-c l e" . eglot-reconnect)
     ("C-c l r" . eglot-rename)))

#+end_src

** Completition

*** Vertico . Orderless
 + Vertico, minimalist completition for minibuffer
 + Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

#+begin_src emacs-lisp

  ;; Enable vertico
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

#+end_src

*** Code-completion framework
#+begin_src emacs-lisp

  (use-package corfu
  :ensure t
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-separator ?\s)
  (corfu-quit-at-boundary nil)
  (corfu-preview-current nil)
  (corfu-preselect 'prompt
  (corfu-scroll-margin 5)
  :init
  (global-corfu-mode))

)

#+end_src

** Treesiteer
#+begin_src emacs-lisp

  (use-package treesit-auto
    :ensure t
    :custom (treesit-auto-install 'prompt)
    :config (global-treesit-auto-mode))

#+end_src

** Lint
#+begin_src emacs-lisp

(use-package flycheck
  :ensure t`
  :init (global-flycheck-mode))
#+end_src

* LANGUAGE SPECEFIC

** Python

*** Poetry
#+begin_src emacs-lisp
  (use-package poetry
    :ensure t)
#+end_src

*** Blacken
#+begin_src emacs-lisp
  (use-package blacken
    :ensure t
    :defer t
    :custom
    (blacken-allow-py36 t)
    (blacken-skip-string-normalization t)
    (blacken-only-if-project-is-blackened t)
    (black-fast-unsafe t)
    :hook (python-base-mode-hook . blacken-mode))
#+end_src

** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :ensure t
    :defer t
    :bind (:map lua-mode-map
          ("C-c C-r" . lua-send-region)
          ("C-c C-e" . lua-send-current-line)))
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rustic
    :custom
    (rustic-lsp-client 'eglot)
    :ensure t
    :defer t)

  (use-package cargo
    :ensure t
    :defer t
    :hook ((rust-ts-mode-hook rustic-mode-hook) . cargo-minor-mode))
#+end_src

** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
    :ensure t
    :defer t)
#+end_src

* SHELLS AND TERMINALS

** Eshell
#+begin_src emacs-lisp

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximun-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "htop" "ssh" "top" "zsh"))

#+end_src

* GIT

** Magit
#+begin_src emacs-lisp

  (use-package magit
    :ensure t
    :hook (after-save . magit-after-save-refresh-status))

#+end_src
